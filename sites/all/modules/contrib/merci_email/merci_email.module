<?php

/**
 * @file
 * merci_email functions
 */
define('MERCI_EMAIL_STATUS_NEVER', 0);
define('MERCI_EMAIL_STATUS_ALWAYS', 1);
define('MERCI_EMAIL_STATUS_CHANGE', 2);


/**
 * Implements hook_menu().
 *
 * @return $items
 */
function merci_email_menu() {

  $admin = array('administer MERCI');

  $items['merci/email/confirm'] = array(
    'title' => 'Confirm MERCI Reservation',
    'description' => 'Takes an ID and returns a page confirming Reservation',
    'page arguments' => array(2),
    'page callback' => 'merci_email_confirm',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  // Standard Administration settings.
  $items['admin/config/system/merci/email'] = array(
    'title' => 'Email',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('merci_email_admin_settings'),
    'access callback' => 'user_access',
    'access arguments' => $admin,
    'description' => t('Configure settings for emails MERCI sends to users.'),
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/config/system/merci/email_body'] = array(
    'title' => 'Email Body',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('merci_email_admin_body_settings'),
    'access callback' => 'user_access',
    'access arguments' => $admin,
    'description' => t('Configure settings for emails MERCI sends to users.'),
    'type' => MENU_LOCAL_TASK,
  );


  return $items;
}


/**
 *
 * @return $form Admin menu settings
 */
function merci_email_admin_body_settings($form, &$form_state) {
  $types = merci_record_status();
  foreach ($types as $key => $type) {
    $form['merci_email_body' . $key] = array(
      '#title' => t('Message for ' . $type),
      '#type' => 'fieldset',
      '#collapsible' => FALSE,
      '#collapsed' => FALSE,
    );
    $form['merci_email_body' . $key]['merci_email_body' . $key] = array(
      '#type' => 'textarea',
      '#title' => t('Email body for: ' . $type),
      '#default_value' => variable_get('merci_email_body' . $key, ''),
      '#description' => t('The body of the email for Status ' . $type),
    );

    if (module_exists('token')) {
      $form['merci_email_body' . $key]['token_help'] = array(
        '#title' => t('Replacement patterns'),
        '#type' => 'fieldset',
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
      );
      $form['merci_email_body' . $key]['token_help']['help'] = array(
        '#theme' => 'token_tree',
        '#token_types' => array('node', 'user'),
      );
    }
  }


  return system_settings_form($form);
}


/**
 * Builds the admininstration settings form.
 *
 * @return $form
 */
function merci_email_admin_settings($form, &$form_state) {

  $form['merci_general']['merci_email_receipt'] = array(
    '#type' => 'radios',
    '#title' => t('Send Email Receipt'),
    '#default_value' => variable_get('merci_email_receipt', 0),
    '#options' => array(
      MERCI_EMAIL_STATUS_NEVER => 'Never',
      MERCI_EMAIL_STATUS_ALWAYS => 'Always',
      MERCI_EMAIL_STATUS_CHANGE => 'On Status change',
    ),
    '#description' => t('When to send an email receipt on save of reservation'),
  );

  $form['merci_general']['merci_email_confirmation'] = array(
    '#type' => 'checkbox',
    '#title' => t('Include Confirmation Link'),
    '#default_value' => variable_get('merci_email_confirmation', 0),
    '#description' => t('Adds link to the email allowing user to change Reservation\'s status from Unconfirmed to Confirmed'),
  );

  $form['merci_general']['merci_email_contract'] = array(
    '#type' => 'checkbox',
    '#title' => t('Include link to print a Contract'),
    '#default_value' => variable_get('merci_email_contract', 0),
    '#description' => t('Add a link a the user can print their Contract'),
  );

  $form['merci_general']['merci_email_date_format'] = array(
    '#type' => 'textfield',
    '#title' => t('Date format'),
    '#default_value' => variable_get('merci_email_date_format', 'Y m d H:i:s'),
    '#description' => t('Date format for Start and End dates of the reservation'),
  );

  $form['merci_general']['merci_email_send_to'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Send emails to'),
    '#options' => user_roles(true),
    '#default_value' => variable_get('merci_email_send_to', ''),
    '#description' => t('Select which groups of people who should receive the email'),
  );

  return system_settings_form($form);
}


/**
 * Implements hook_email_help().
 *
 */
function merci_email_help($path, $arg) {
  global $user;
  $output = "";

  switch ($path) {
    case 'admin/config/system/merci/email_body':
      $output .= '<p>' . t('You can send a different email based on the current status of the reservation.') . '</p>';
  }
  return $output;
}


/**
 * Implement hook_node_update()
 *
 * @param node $node
 */
function merci_email_node_update($node) {
  if ($node->type == 'merci_reservation') {
    _merci_email_check_send_email($node);
  }
}


/**
 * Implement hook_node_insert()
 * 
 * @param node $node
 */
function merci_email_node_insert($node) {
  if ($node->type == 'merci_reservation') {
    _merci_email_check_send_email($node, TRUE);
  }
}


/**
 * Check if to send an emaail.
 *
 * @param node $node
 * @param boolean $new 
 */
function _merci_email_check_send_email($node, $new = FALSE) {
  if (variable_get('merci_email_receipt', -1) == MERCI_EMAIL_STATUS_ALWAYS) {
    merci_email_mail_send($node);
  }
  elseif (variable_get('merci_email_receipt', -1) == MERCI_EMAIL_STATUS_CHANGE) {
    if (($node->merci_original_reservation_status != $node->merci_reservation_status) || $new) {
      merci_email_mail_send($node);
    }
  }
}


/**
 * Send email to users
 *
 * @param node $node
 */
function _merci_email_email_body($node) {
  $body = '';

  $default_msg = "Your reservation is now: " . merci_record_status($node->merci_reservation_status) . "\n\n
    You have reserved the following items from [dates]\n\n
    [items]\n\n
    [confirm]\n\n
    [contract]\n\n";

  $account = array_shift(user_load_multiple(array(), array('name' => check_plain($node->name))));

  if ($account->mail && variable_get('site_mail', 0)) {
    $body = variable_get('merci_email_body' . $node->merci_reservation_status, $default_msg);

    // Fill body with token_replace().
    global $user;
    $body = token_replace($body, array('node' => $node, 'user' => $user));
  }
  return $body;
}


/**
 * Change status to Confirmed
 *
 * @param int $nid
 */
function merci_email_confirm($nid) {
  // TODO: this needs testing...code from d6
  global $basepath;
  if (merci_confirm_reservation($nid)) {
    drupal_set_message(t('Reservation confirmed'));
  }
  else {
    drupal_set_message(t('Reservation not confirmed.  The Reservation may have been confirmed by staff.'));
  }

  $return = $_GET["destination"];
  if (!$return) {
    $return = $basepath;
  }
  drupal_goto($return);
}


function merci_email_mail($key, &$message, $params) {
  global $user;

  // Each message is associated with a language, which may or may not be the
  // current user's selected language, depending on the type of e-mail being
  // sent. This $options array is used later in the t() calls for subject
  // and body to ensure the proper translation takes effect.
  $options = array(
    'langcode' => $message['language']->language,
  );

  switch ($key) {
    // Send a simple message from the contact form.
    case 'merci_message':
      $start_object = merci_create_local_date_object($params['node']->field_merci_date['und'][0]['value']);
      $date_format = variable_get('merci_email_date_format', 'Y-m-d');
      $from_date = date_format($start_object, $date_format);

      $message['subject'] = t('@site-name Reservation Starting: @date', array('@site-name' => variable_get('site_name', 'Drupal'), '@date' => $from_date), $options);
      $message['body'][] = check_plain(_merci_email_email_body($params['node']));
      break;
  }
}


/**
 * Send an e-mail.
 *
 * @param $node
 *   An array of values from the contact form fields that were submitted.
 *   There are just two relevant items: $form_values['email'] and
 *   $form_values['message'].
 */
function merci_email_mail_send($node) {

  $account = array_shift(user_load_multiple(array(), array('name' => check_plain($node->name))));

  $module = 'merci_email';
  $key = 'merci_message';

  $from = variable_get('site_mail', 'admin@example.com');

  $params = array('node' => $node);
  $language = language_default();

  $send = TRUE;

  $rids = variable_get('merci_email_send_to', 'authenticated user');
  foreach ($rids as $rid) {
    if ($rid == DRUPAL_AUTHENTICATED_RID) {
      $to = $account->mail;
      _merci_email_mail_send($module, $key, $to, $language, $params, $from, $send);
    }
    else {
      $uids = _merci_email_get_users_for_role($rid);
      foreach ($uids as $uid) {
        $user = user_load($uid);
        $to = $user->mail;
        _merci_email_mail_send($module, $key, $to, $language, $params, $from, $send);
      }
    }
  }
}


/**
 * Internal function to send email.
 *
 * @param type $module
 * @param type $key
 * @param type $to
 * @param type $language
 * @param type $params
 * @param type $from
 * @param type $send 
 */
function _merci_email_mail_send($module, $key, $to, $language, $params, $from, $send) {
  $result = drupal_mail($module, $key, $to, $language, $params, $from, $send);
  if ($result['result'] == TRUE) {
    drupal_set_message(t('Your message has been sent to: ' . $to));
  }
  else {
    drupal_set_message(t('There was a problem sending your message and it was not sent to: ' . $to), 'error');
  }
}


/**
 * Finds all users for a particular role
 *
 * @param type $rid
 * @return array of role id's <rid>
 */
function _merci_email_get_users_for_role($rid) {
  $result = db_query("SELECT uid FROM {users_roles} WHERE rid = :rid", array(':rid' => $rid));
  $users = array();
  while ($row = $result->fetchField()) {
    $users[] = $row;
  }
  return $users;
}


/**
 * Implements hook_token_info().
 */
function merci_email_token_info() {

  $types['merci_email'] = array(
    'name' => t("MERCI Email Tokens"),
    'description' => t("Tokens for MERCI Email."),
  );

  $params['reservation_items_bullet'] = array(
    'name' => t("Reservation Items - Bullet List"),
    'description' => t("A bullet list of Reservation Items"),
  );
  $params['reservation_items_comma'] = array(
    'name' => t("Reservation Items - Comma"),
    'description' => t("A comma list of Reservation Items"),
  );
  $params['reservation_start_datetime'] = array(
    'name' => t("Reservation Start Time"),
    'description' => t("Formated Start Date/Time"),
  );
  $params['reservation_end_datetime'] = array(
    'name' => t("Reservation End Time"),
    'description' => t("Formated End Date/Time"),
  );
  $params['contract_url'] = array(
    'name' => t("Contract URL"),
    'description' => t("URL to the Printable Contract"),
  );
  $params['confirm_url'] = array(
    'name' => t("Confirm URL"),
    'description' => t("URL to comfirm reservation"),
  );

  return array(
    'types' => $types,
    'tokens' => array(
      'merci_email' => $params,
    ),
  );
}


/**
 * Implements hook_tokens().
 */
function merci_email_tokens($type, $tokens, array $data = array(), array $options = array()) {
  global $user;

  $replacements = array();

  if ($type == 'merci_email') {
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'reservation_items_bullet':
          $items = "";
          foreach ($data['node']->merci_reservation_items as $num => $choice) {
            $item = $choice['merci_item_nid'];
            if (is_numeric($num)) {
              //Existing Reservation
              $items .= "* " . $choice['name'] . ".\n";
            }
            elseif ($item) {
              //New Reservation
              $title = node_type_get_name($item);
              $items .= "* " . $title . ".\n";
            }
          }
          $replacements[$original] = $items;
          break;
        case 'reservation_items_comma':
          $items = "";
          foreach ($data['node']->merci_reservation_items as $num => $choice) {
            $item = $choice['merci_item_nid'];
            if (is_numeric($num)) {
              //Existing Reservation
              $items .= $choice['name'] . ", ";
            }
            elseif ($item) {
              //New Reservation
              $title = node_type_get_name($item);
              $items .= $title . ", ";
            }
          }
          $replacements[$original] = substr($items, 0, -2);
          break;
        case 'reservation_start_datetime':
          $date_format = variable_get('merci_email_date_format', 'Y m d H:i:s');
          $start = $data['node']->field_merci_date['und'][0]['value'];
          $start_object = merci_create_local_date_object($start);
          $from_date = date_format($start_object, $date_format);
          $replacements[$original] = $from_date;
          break;
        case 'reservation_end_datetime':
          $date_format = variable_get('merci_email_date_format', 'Y m d H:i:s');
          $end = $data['node']->field_merci_date['und'][0]['value2'];
          $end_object = merci_create_local_date_object($end);
          $to_date = date_format($end_object, $date_format);
          $replacements[$original] = $to_date;
          break;
        case 'contract_url':
          $contract = '';
          if (variable_get('merci_email_contract', 0)) {
            $contract = url('node/' . $data['node']->nid . '/contract', array('absolute' => TRUE));
          }
          $replacements[$original] = $contract;
          break;
        case 'confirm_url':
          $confrim = '';
          if (variable_get('merci_email_confirmation', 0) && $data['node']->merci_reservation_status == MERCI_STATUS_UNCONFIRMED) {
            $destination = 'destination=node/' . $data['node']->nid;
            $confirm = url('merci/confirm/' . $data['node']->nid, array('query' => $destination, 'absolute' => TRUE));
          }
          $replacements[$original] = $confirm;
          break;
      }
    }
  }

  return $replacements;
}